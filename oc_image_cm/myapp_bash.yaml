apiVersion: batch/v1
kind: CronJob
metadata:
  name: mycronjob
spec:
  schedule: "*/1 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: myserviceaccount
          containers:
          - name: myapp
            image: quay.io/vigneshwaran_s/myapptesting
            command: ["/bin/sh", "-c", "cat /app/check_status.sh | /bin/sh"]
            volumeMounts: 
            - mountPath: /app
              name: myvolume
          volumes: 
          - name: myvolume 
            configMap:
              name: myconfigmap
              items:
              - key: check_status.sh
                path: check_status.sh
          restartPolicy: OnFailure
---

# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: myclusterrole
# rules:
#   apiGroups: [""]
#   resources: ["pods", "nodes"]
#   verbs: ["get", "list"]
# ---

# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: myclusterrolebinding
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: myclusterrole
# subjects:
# - kind: ServiceAccount
#   name: myserviceaccount
#   namespace: default
# ---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: myserviceaccount
spec:
  serviceAccountName: myserviceaccount

apiVersion: v1
kind: ConfigMap
metadata:
  name: myconfigmap
data:
  check_status.sh: |
    #!/bin/sh

    output_log="status_check_output.log"
    #error_log="status_check_error.log"

    # Command 1
    get_nodes=$(oc get nodes)
    echo "Running Command 1: get_nodes"
    $get_nodes #>> "$output_log"

    # Command 2
    get_co=$(oc get co)
    echo "Running Command 2: get_co" 
    $get_co #>> "$output_log"

    # Command 3
    get_pods=$(oc get pods -A | egrep -v 'Running|Completed')
    echo "Running Command 3: get_pods"
    $get_pods #>> "$output_log" 

    #echo "Commands executed. Output saved to '$output_log'"

